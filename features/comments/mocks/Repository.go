// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	comments "BE-Sosmed/features/comments"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteComment provides a mock function with given fields: UserID, CommentID
func (_m *Repository) DeleteComment(UserID uint, CommentID uint) error {
	ret := _m.Called(UserID, CommentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(UserID, CommentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertComment provides a mock function with given fields: UserID, newComment
func (_m *Repository) InsertComment(UserID uint, newComment comments.Comment) (comments.Comment, error) {
	ret := _m.Called(UserID, newComment)

	var r0 comments.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, comments.Comment) (comments.Comment, error)); ok {
		return rf(UserID, newComment)
	}
	if rf, ok := ret.Get(0).(func(uint, comments.Comment) comments.Comment); ok {
		r0 = rf(UserID, newComment)
	} else {
		r0 = ret.Get(0).(comments.Comment)
	}

	if rf, ok := ret.Get(1).(func(uint, comments.Comment) error); ok {
		r1 = rf(UserID, newComment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: UserID, updatedComment
func (_m *Repository) UpdateComment(UserID uint, updatedComment comments.Comment) (comments.Comment, error) {
	ret := _m.Called(UserID, updatedComment)

	var r0 comments.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, comments.Comment) (comments.Comment, error)); ok {
		return rf(UserID, updatedComment)
	}
	if rf, ok := ret.Get(0).(func(uint, comments.Comment) comments.Comment); ok {
		r0 = rf(UserID, updatedComment)
	} else {
		r0 = ret.Get(0).(comments.Comment)
	}

	if rf, ok := ret.Get(1).(func(uint, comments.Comment) error); ok {
		r1 = rf(UserID, updatedComment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
