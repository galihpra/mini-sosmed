// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	comments "BE-Sosmed/features/comments"

	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"

	postings "BE-Sosmed/features/postings"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AmbilComment provides a mock function with given fields: PostID
func (_m *Service) AmbilComment(PostID uint) ([]comments.Comment, error) {
	ret := _m.Called(PostID)

	var r0 []comments.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]comments.Comment, error)); ok {
		return rf(PostID)
	}
	if rf, ok := ret.Get(0).(func(uint) []comments.Comment); ok {
		r0 = rf(PostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(PostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AmbilCommentForDetailPost provides a mock function with given fields: PostID
func (_m *Service) AmbilCommentForDetailPost(PostID uint) ([]comments.Comment, error) {
	ret := _m.Called(PostID)

	var r0 []comments.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]comments.Comment, error)); ok {
		return rf(PostID)
	}
	if rf, ok := ret.Get(0).(func(uint) []comments.Comment); ok {
		r0 = rf(PostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(PostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AmbilPostingByPostID provides a mock function with given fields: PostID
func (_m *Service) AmbilPostingByPostID(PostID uint) (postings.Posting, error) {
	ret := _m.Called(PostID)

	var r0 postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (postings.Posting, error)); ok {
		return rf(PostID)
	}
	if rf, ok := ret.Get(0).(func(uint) postings.Posting); ok {
		r0 = rf(PostID)
	} else {
		r0 = ret.Get(0).(postings.Posting)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(PostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AmbilPostingByUsername provides a mock function with given fields: Username
func (_m *Service) AmbilPostingByUsername(Username string) ([]postings.Posting, error) {
	ret := _m.Called(Username)

	var r0 []postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]postings.Posting, error)); ok {
		return rf(Username)
	}
	if rf, ok := ret.Get(0).(func(string) []postings.Posting); ok {
		r0 = rf(Username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postings.Posting)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePosting provides a mock function with given fields: token, postID
func (_m *Service) DeletePosting(token *jwt.Token, postID uint) error {
	ret := _m.Called(token, postID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) error); ok {
		r0 = rf(token, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LikePosting provides a mock function with given fields: token, postID
func (_m *Service) LikePosting(token *jwt.Token, postID uint) (postings.Posting, error) {
	ret := _m.Called(token, postID)

	var r0 postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) (postings.Posting, error)); ok {
		return rf(token, postID)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) postings.Posting); ok {
		r0 = rf(token, postID)
	} else {
		r0 = ret.Get(0).(postings.Posting)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, uint) error); ok {
		r1 = rf(token, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SemuaPosting provides a mock function with given fields:
func (_m *Service) SemuaPosting() ([]postings.Posting, error) {
	ret := _m.Called()

	var r0 []postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]postings.Posting, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []postings.Posting); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postings.Posting)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TambahPosting provides a mock function with given fields: token, newPosting
func (_m *Service) TambahPosting(token *jwt.Token, newPosting postings.Posting) (postings.Posting, error) {
	ret := _m.Called(token, newPosting)

	var r0 postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, postings.Posting) (postings.Posting, error)); ok {
		return rf(token, newPosting)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, postings.Posting) postings.Posting); ok {
		r0 = rf(token, newPosting)
	} else {
		r0 = ret.Get(0).(postings.Posting)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, postings.Posting) error); ok {
		r1 = rf(token, newPosting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePosting provides a mock function with given fields: token, updatePosting
func (_m *Service) UpdatePosting(token *jwt.Token, updatePosting postings.Posting) (postings.Posting, error) {
	ret := _m.Called(token, updatePosting)

	var r0 postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, postings.Posting) (postings.Posting, error)); ok {
		return rf(token, updatePosting)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, postings.Posting) postings.Posting); ok {
		r0 = rf(token, updatePosting)
	} else {
		r0 = ret.Get(0).(postings.Posting)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, postings.Posting) error); ok {
		r1 = rf(token, updatePosting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
