// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	comments "BE-Sosmed/features/comments"

	mock "github.com/stretchr/testify/mock"

	postings "BE-Sosmed/features/postings"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeletePost provides a mock function with given fields: userID, postID
func (_m *Repository) DeletePost(userID uint, postID uint) error {
	ret := _m.Called(userID, postID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPost provides a mock function with given fields:
func (_m *Repository) GetAllPost() ([]postings.Posting, error) {
	ret := _m.Called()

	var r0 []postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]postings.Posting, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []postings.Posting); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postings.Posting)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComment provides a mock function with given fields: PostID
func (_m *Repository) GetComment(PostID uint) ([]comments.Comment, error) {
	ret := _m.Called(PostID)

	var r0 []comments.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]comments.Comment, error)); ok {
		return rf(PostID)
	}
	if rf, ok := ret.Get(0).(func(uint) []comments.Comment); ok {
		r0 = rf(PostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(PostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentForDetailPost provides a mock function with given fields: PostID
func (_m *Repository) GetCommentForDetailPost(PostID uint) ([]comments.Comment, error) {
	ret := _m.Called(PostID)

	var r0 []comments.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]comments.Comment, error)); ok {
		return rf(PostID)
	}
	if rf, ok := ret.Get(0).(func(uint) []comments.Comment); ok {
		r0 = rf(PostID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(PostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostByPostID provides a mock function with given fields: PostID
func (_m *Repository) GetPostByPostID(PostID uint) (postings.Posting, error) {
	ret := _m.Called(PostID)

	var r0 postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (postings.Posting, error)); ok {
		return rf(PostID)
	}
	if rf, ok := ret.Get(0).(func(uint) postings.Posting); ok {
		r0 = rf(PostID)
	} else {
		r0 = ret.Get(0).(postings.Posting)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(PostID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostByUsername provides a mock function with given fields: Username
func (_m *Repository) GetPostByUsername(Username string) ([]postings.Posting, error) {
	ret := _m.Called(Username)

	var r0 []postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]postings.Posting, error)); ok {
		return rf(Username)
	}
	if rf, ok := ret.Get(0).(func(string) []postings.Posting); ok {
		r0 = rf(Username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postings.Posting)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPosting provides a mock function with given fields: userID, newPosting
func (_m *Repository) InsertPosting(userID uint, newPosting postings.Posting) (postings.Posting, error) {
	ret := _m.Called(userID, newPosting)

	var r0 postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, postings.Posting) (postings.Posting, error)); ok {
		return rf(userID, newPosting)
	}
	if rf, ok := ret.Get(0).(func(uint, postings.Posting) postings.Posting); ok {
		r0 = rf(userID, newPosting)
	} else {
		r0 = ret.Get(0).(postings.Posting)
	}

	if rf, ok := ret.Get(1).(func(uint, postings.Posting) error); ok {
		r1 = rf(userID, newPosting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikePosts provides a mock function with given fields: userID, postID, updatePosting
func (_m *Repository) LikePosts(userID uint, postID uint, updatePosting postings.Posting) (postings.Posting, error) {
	ret := _m.Called(userID, postID, updatePosting)

	var r0 postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, postings.Posting) (postings.Posting, error)); ok {
		return rf(userID, postID, updatePosting)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, postings.Posting) postings.Posting); ok {
		r0 = rf(userID, postID, updatePosting)
	} else {
		r0 = ret.Get(0).(postings.Posting)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, postings.Posting) error); ok {
		r1 = rf(userID, postID, updatePosting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: userID, updatePosting
func (_m *Repository) UpdatePost(userID uint, updatePosting postings.Posting) (postings.Posting, error) {
	ret := _m.Called(userID, updatePosting)

	var r0 postings.Posting
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, postings.Posting) (postings.Posting, error)); ok {
		return rf(userID, updatePosting)
	}
	if rf, ok := ret.Get(0).(func(uint, postings.Posting) postings.Posting); ok {
		r0 = rf(userID, updatePosting)
	} else {
		r0 = ret.Get(0).(postings.Posting)
	}

	if rf, ok := ret.Get(1).(func(uint, postings.Posting) error); ok {
		r1 = rf(userID, updatePosting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
